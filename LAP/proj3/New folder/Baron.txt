/*	 O Regresso do BarÃ£o!!!

01234567890123456789012345678901234567890123456789012345678901234567890123456789
*/

// GLOBAL VARIABLES

// tente nÃ£o definir mais nenhuma variÃ¡vel global

var ctx, empty, baron, world, control;


// ACTORS

var Actor = EXTENDS(JSRoot, {
	x: 0, y: 0,
	image: null,
	time: 0,
	deathTime: -1,
	INIT: function(x, y, kind) {
		this.x = x;
		this.y = y;
		this.image = GameImage.get(kind, "").image;
		this.time = 0;
		this.show();
	},
	show: function() {
		world[this.x][this.y] = this;
		ctx.drawImage(this.image, this.x * ACTOR_PIXELS_X, this.y * ACTOR_PIXELS_Y);
	},
	hide: function() {
		world[this.x][this.y] = empty;
		ctx.drawImage(empty.image, this.x * ACTOR_PIXELS_X, this.y * ACTOR_PIXELS_Y);
	},
	move: function(dx, dy) {
		if(this.deathTime < 0){
			neigbour = world[this.x + dx][this.y + dy];
			if(neigbour == empty){
				this.hide();
				this.x += dx;
				this.y += dy;
				this.show();
			}
		}
	},


	smash: function(){
	},

	catch: function(){
		return false;
	},

	victory: function(){
	},
	animation: function(){
		if((this.time - this.deathTime)%2 == 1){
			ctx.drawImage(empty.image, this.x * ACTOR_PIXELS_X, this.y * ACTOR_PIXELS_Y);
		} else {
			ctx.drawImage(this.image, this.x * ACTOR_PIXELS_X, this.y * ACTOR_PIXELS_Y);
		}
		if((this.time - this.deathTime) > 10){
			this.die();
		}
	},
	die: function(){
		this.hide();
	},
	kill: function(){
		if(this.deathTime < 0)
			this.deathTime = this.time;
	},
	attack: function(){
	},
	destroy: function(){},
	
	ballHit: function(){},
	
	canMove: function(dx, dy){
		return world[this.x + dx][this.y + dy] == empty
	},
	rise: function(){},



});

var Immovable = EXTENDS(Actor, {
	move: function(dx, dy){},
	kill: function(){},
	die: function(){},
	animation: function(){},
})

var Hero = EXTENDS(Actor, {
	die: function(){
		control.lifes--;
		if(control.lifes < 1){
			alert("Fim do jogo")
			control.level = 1;
			control.score = 0;
			control.time = 0;
			control.lifes = 3
			control.loadLevel(control.level);
		} else {
			alert("Vida perdida")
			control.loadLevel(control.level);
		}
	},
	attack: function(){
		this.kill();
	}
})

var Monsters = EXTENDS(Actor, {
	ballHit: function(){
		this.kill();
	},
	rise: function(){
		this.kill();
	}
})

var Objects = EXTENDS(Actor, {
	smash: function(){
	}
})

var Weapons = EXTENDS(Actor, {
	a:0, b:0,
	catch: function() {
		if(baron.balls.length < 10){
			baron.balls.push(this);
			this.hide();
			return true;
		}
		return false;
	},
	move: function(dx, dy){
		if(this.a != 0 || this.b != 0)
			var neigbour = world[this.x + dx][this.y + dy];
			if(neigbour == empty)
				this.SUPER(Actor.move, dx, dy);
			else {
				neigbour.ballHit();
				this.stop();
			}
	},
	stop: function () {
		this.a = 0;
		this.b = 0;
	}

})

var Empty = EXTENDS(Actor, {
	INIT: function() {
		this.SUPER(Actor.INIT, -1, -1, "Empty", "");
	},
	show: function() {},
	hide: function() {},
})

var Block = EXTENDS(Immovable, {
	INIT: function(x, y) {
		this.SUPER(Actor.INIT, x, y, "Block");
	}, 
})

var Sun = EXTENDS(Immovable, {
	INIT: function(x, y) {
		this.SUPER(Actor.INIT, x, y, "Sun");
	},
	victory: function(){
		control.level++;
		control.score += (1200-control.time)/10;
		control.score += control.lifes * 200;
		control.lifes = 3;
		control.loadLevel(control.level);
	}
})

var Jerrycan = EXTENDS(Objects, {
	INIT: function(x, y) {
		this.SUPER(Actor.INIT, x, y, "Jerrycan");
	},
	animation: function() {
		var neigbour = world[this.x][this.y + 1];
		if(control.time%5 == 0){
			this.move(0, 1);
			neigbour.smash();
		}
		neigbour.victory();
	},

	smash: function() {

	},
})

var Weight = EXTENDS(Objects, {
	INIT: function(x, y) {
		this.SUPER(Actor.INIT, x, y, "Weight");
	},
	animation: function() {
		if(this.deathTime > 0){
			this.SUPER(Actor.animation);
			return;
		}
		var neigbour = world[this.x][this.y + 1];
		if(control.time%5 == 0 ){
			this.move(0, 1);
			neigbour.smash();
		}
	},
	destroy: function(){
		this.kill();
	}
})

var Ballon = EXTENDS(Objects, {
	INIT: function(x, y) {
		this.SUPER(Actor.INIT, x, y, "Ballon");
	},
	animation: function() {
		if(this.deathTime > 0){
			this.SUPER(Actor.animation);
			return;
		}
		var neigbour = world[this.x][this.y -1];
		if(control.time%10 == 0 ){
			this.move(0, -1);
			neigbour.rise();
		}
	},
	destroy: function(){
		this.kill();
	}
})

var Ball = EXTENDS(Weapons, {
	INIT: function(x, y) {
		this.SUPER(Actor.INIT, x, y, "Ball");
	},
	animation: function(){
		if(this.a != 0 || this.b != 0){
			this.move(this.a, this.b);
		}
	},
	shoot: function(x, y, dx, dy){
		this.x = x+dx;
		this.y = y+dy;
		this.a = dx;
		this.b = dy;
	}
})

var Mammoth = EXTENDS(Monsters, {
	INIT: function(x, y) {
		this.SUPER(Actor.INIT, x, y, "Mammoth");
	},

	animation: function() {
		if(this.deathTime > 0){
			this.SUPER(Actor.animation);
			return;
		}
     	var movex = 0;
     	var movey = 0;
     	if( baron.x -this.x > 0)
     		movex = 1;
     	else if(baron.x - this.x < 0)
     		movex = -1;
     	if(baron.y - this.y > 0)
     		movey = 1;
     	else if(baron.y - this.y < 0)
     		movey = -1

     	var neigbour = world[this.x + movex][this.y +movey];
     	if(control.time%2 == 0){
     		neigbour.attack();
     		this.move(movex, movey);		
     	}
 
	},
	smash: function(){
		this.kill();
	},

})

var Baron = EXTENDS(Hero, {
	balls: [],
	dx: 0, dy: 0,
	INIT: function(x, y) {
		this.SUPER(Actor.INIT, x, y, "Baron");
		this.balls = [];
		this.dx = 0;
		this.dy = 0;
	},
	animation: function() {
		if(control.time >= 1200)
			this.die();
		if(this.deathTime > 0){
			this.SUPER(Actor.animation);
			return;
		}
		var d = control.getKey();
		if( d == null ) return;
		if(d == 'Z'){
			this.shoot(this.dx, this.dy);
			return;
		}
		this.dx = d[0]; this.dy = d[1];
		var neigbour = world[this.x + this.dx][this.y + this.dy];
		if(neigbour == empty)
			this.move(this.dx, this.dy);
		else{
			if(!neigbour.catch()){
				if(neigbour.canMove(this.dx, this.dy))
					neigbour.move(this.dx, this.dy);
				else
					neigbour.destroy();
			}
			this.move(this.dx, this.dy);
		}

		
	},
	shoot: function(dx, dy){
		if(world[this.x + dx][this.y + dy] == empty){
			var ball = this.balls.pop();
			ball.shoot(baron.x, baron.y, dx, dy);
			ball.show();
		}
	},
	smash: function(){
		this.kill();
	}

})

// GAME CONTROL

var GameControl = EXTENDS(JSRoot, {
	key: 0,
	time: 0,
	level : 1,
	score: 0,
	lifes: 3,
	INIT: function() {
		ctx = document.getElementById("canvas1").getContext("2d");
		empty = NEW(Empty);	// only one empty actor needed
		world = this.createWorld();
		level = 1;
		score = 0;
		lifes = 3;
		this.loadLevel(level);
		this.setupEvents();
		control = this;
	},
	createWorld: function () { // stored by columns
		var matrix = new Array(WORLD_WIDTH);
		for( var x = 0 ; x < WORLD_WIDTH ; x++ ) {
			var a = new Array(WORLD_HEIGHT);
			for( var y = 0 ; y < WORLD_HEIGHT ; y++ )
				a[y] = empty;
			matrix[x] = a;
		}
		return matrix;
	},
	loadLevel: function(level) {
		this.time = 0;
		if( level < 1 || level > MAPS.length )
			fatalError("Invalid level " + level)
		var map = MAPS[level-1];  // -1 because levels start at 1
		for(var x=0 ; x < WORLD_WIDTH ; x++)
			for(var y=0 ; y < WORLD_HEIGHT ; y++) {
				world[x][y].hide();
				var code = map[y][x];  // x/y reversed because map stored by lines
				var gi = GameImage.getByCode(code);
				if( gi ) {
					var a = NEW(globalByName(gi.kind), x, y);
					if( gi.kind == "Baron" )
						baron = a;
				}
			}
	},
	getKey:  function() {
		var k = this.key;
		this.key = 0;
		switch( k ) {
			case 37: case 79: case 74: return [-1, 0]; //  LEFT, O, J
			case 38: case 81: case 73: return [0, -1]; //    UP, Q, I
			case 39: case 80: case 76: return [1, 0];  // RIGHT, P, L
			case 40: case 65: case 75: return [0, 1];  //  DOWN, A, K
			case 0: return null;
			default: return String.fromCharCode(k);
		// http://www.cambiaresearch.com/articles/15/javascript-char-codes-key-codes
		};	
	},
	setupEvents: function() {
		addEventListener("keydown", this.keyDownEvent, false);
		addEventListener("keyup", this.keyUpEvent, false);
		setInterval(this.animationEvent, 1000 / ANIMATION_EVENTS_PER_SECOND);
	},
	animationEvent: function() {
		control.time++;
		for(var x=0 ; x < WORLD_WIDTH ; x++)
			for(var y=0 ; y < WORLD_HEIGHT ; y++) {
				var a = world[x][y];
				if( a.time < control.time ) {
					a.time = control.time;
					a.animation();
				}
			}
	},
	keyDownEvent: function(k) { control.key = k.keyCode; },
	keyUpEvent: function(k) { },
});


// HTML FORM

function onLoad() {
  // load images an then run the game
	GameImage.loadImages(function() {NEW(GameControl);});

}

function b1() { 
	control.level = 1;
	control.score = 0;
	control.lifes = 3;
	control.loadLevel(1);
	control.time=0;	
	mesg("O jogo foi reiniciado");
}
function b2() { 
	mesg("Duracao: " + control.time/10 + " segundos");
}
function b3() {
	mesg("Tem " + control.lifes + " vidas");
}

function b4() {
	mesg(control.score + " pontos");
}