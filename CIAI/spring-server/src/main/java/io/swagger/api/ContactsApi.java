/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Contact;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-11-03T17:12:18.187Z")

@Api(value = "contacts", description = "the contacts API")
public interface ContactsApi {

    @ApiOperation(value = "List all the contacts", nickname = "contactsGet", notes = "", response = Contact.class, responseContainer = "List", tags={ "contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Contact.class, responseContainer = "List") })
    @RequestMapping(value = "/contacts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Contact>> contactsGet(@ApiParam(value = "Substring to search for", defaultValue = "") @Valid @RequestParam(value = "search", required = false, defaultValue="") String search);


    @ApiOperation(value = "Deletes a contact", nickname = "contactsIdDelete", notes = "", tags={ "contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Contact not found") })
    @RequestMapping(value = "/contacts/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> contactsIdDelete(@ApiParam(value = "Contact id to delete",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Find contact by ID", nickname = "contactsIdGet", notes = "Returns a single contact", response = Contact.class, tags={ "contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Contact.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Contact not found") })
    @RequestMapping(value = "/contacts/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Contact> contactsIdGet(@ApiParam(value = "ID of contact to return",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Updates a contact with form data", nickname = "contactsIdPut", notes = "", tags={ "contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/contacts/{id}",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> contactsIdPut(@ApiParam(value = "ID of contact that needs to be updated",required=true) @PathVariable("id") Long id,@ApiParam(value = "Updated name of the contact") @RequestParam(value="name", required=false)  String name,@ApiParam(value = "Updated email of the contact") @RequestParam(value="email", required=false)  String email,@ApiParam(value = "Updated phone of the contact") @RequestParam(value="phone", required=false)  String phone);


    @ApiOperation(value = "Create a contact", nickname = "contactsPost", notes = "", tags={ "contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/contacts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> contactsPost(@ApiParam(value = "Contact object that needs to be added" ,required=true )  @Valid @RequestBody Contact body);

}
