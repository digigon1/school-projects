swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "companies"
  description: "Everything about your Companies"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "contacts"
  description: "Access to contacts"
schemes:
- "https"
- "http"
paths:
  /companies:
    get:
      tags:
      - "companies"
      summary: "List all the companies"
      produces:
      - "application/json"
      parameters:
      - name: "search"
        in: "query"
        description: "Substring to search for"
        required: false
        type: "string"
        default: ""
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Company"

    post:
      tags:
      - "companies"
      summary: "Create a company"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Company object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Company"
      responses:
        405:
          description: "Invalid input"


  /companies/{id}:
    get:
      tags:
      - "companies"
      summary: "Find company by ID"
      description: "Returns a single company"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of company to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Company"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Company not found"

    put:
      tags:
      - "companies"
      summary: "Updates a company with form data"
      description: ""
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of company that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the company"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"

    delete:
      tags:
      - "companies"
      summary: "Deletes a company"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Company id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Company not found"

  /companies/{id}/contacts:
    get:
      tags:
      - "companies"
      summary: "List all the contacts of a company"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Company id to list contacts"
        required: true
        type: "integer"
        format: "int64"
      - name: "search"
        in: "query"
        description: "Substring to search for"
        required: false
        type: "string"
        default: ""
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Contact"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Company not found"

    post:
      tags:
      - "companies"
      summary: "Create a contact of company"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Company id to create contact"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Contact object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Contact"
      responses:
        405:
          description: "Invalid input"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Company not found"

  /contacts:
    get:
      tags:
      - "contacts"
      summary: "List all the contacts"
      produces:
      - "application/json"
      parameters:
      - name: "search"
        in: "query"
        description: "Substring to search for"
        required: false
        type: "string"
        default: ""
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Contact"

    post:
      tags:
      - "contacts"
      summary: "Create a contact"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Contact object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Contact"
      responses:
        405:
          description: "Invalid input"


  /contacts/{id}:
    get:
      tags:
      - "contacts"
      summary: "Find contact by ID"
      description: "Returns a single contact"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of contact to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Contact"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Contact not found"

    put:
      tags:
      - "contacts"
      summary: "Updates a contact with form data"
      description: ""
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of contact that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the contact"
        required: false
        type: "string"
      - name: "email"
        in: "formData"
        description: "Updated email of the contact"
        required: false
        type: "string"
      - name: "phone"
        in: "formData"
        description: "Updated phone of the contact"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"

    delete:
      tags:
      - "contacts"
      summary: "Deletes a contact"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Contact id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Contact not found"


securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Contact:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
    xml:
      name: "Contact"

  Company:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      contacts:
        type: "array"
        xml:
          name: "contact"
          wrapped: true
        items:
          $ref: "#/definitions/Contact"
    xml:
      name: "Company"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"